// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Course {
    id        Int          @id @default(autoincrement())
    modules   Module[]
    language  String
    owner     User         @relation(fields: [ownerId], references: [id], name: "courseOwner", onDelete: Cascade)
    editors   User[]       @relation(name: "editors")
    ownerId   Int          @map("owner_id")
    image     String?
    published Boolean      @default(false)
    users     UserCourse[]

    @@map("courses")
}

model Module {
    id           Int        @id @default(autoincrement())
    course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId     Int        @map("course_id")
    isCheckpoint Boolean    @default(false) @map("is_checkpoint")
    lessons      Lesson[]
    title        String
    index        Int
    image        String?
    published    Boolean    @default(false)
    questions    Question[]
    words        Word[]

    @@map("modules")
}

model Lesson {
    id        Int        @id @default(autoincrement())
    questions Question[]
    module    Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    moduleId  Int        @map("module_id")
    title     String
    index     Int

    @@map("lessons")
}

model Question {
    id               Int            @id @default(autoincrement())
    type             QuestionType
    native           String?
    infoTitle        String?        @map("info_title")
    info             String?
    target           String?
    lessonId         Int?           @map("lesson_id")
    lesson           Lesson?        @relation(fields: [lessonId], references: [id], onDelete: SetNull)
    feedbackRules    FeedbackRule[]
    recording        String?
    moduleId         Int            @map("module_id")
    module           Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    notes            String?
    difficulty       Int?
    firstPass        Boolean        @default(true)
    index            Int
    wordHints        WordHint[]
    forwardEnabled   Boolean        @default(true)
    backwardEnabled  Boolean        @default(true)
    recordingEnabled Boolean        @default(true)

    @@map("questions")
}

model WordHint {
    id           Int      @id @default(autoincrement())
    question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId   Int      @map("question_id")
    wordString   String   @map("word_string")
    wordEntity   Word?    @relation(fields: [wordEntityId], references: [id], onDelete: SetNull)
    wordEntityId Int?

    @@map("word_hints")
}

model FeedbackRule {
    id         Int      @id @default(autoincrement())
    trigger    String
    feedback   String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId Int      @map("question_id")

    @@map("feedback_rules")
}

enum QuestionType {
    QUESTION
    INFO

    @@map("questions_types")
}

model Word {
    id        Int        @id @default(autoincrement())
    native    String
    target    String
    recording String?
    module    Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    moduleId  Int
    WordHint  WordHint[]

    @@map("words")
}

model User {
    id              Int          @id @default(autoincrement())
    email           String       @unique
    password        String
    username        String       @unique
    canEdit         Boolean      @default(false) @map("can_edit")
    editableCourses Course[]     @relation(name: "editors")
    ownedCourses    Course[]     @relation(name: "courseOwner")
    friends         User[]       @relation(name: "friends")
    fakeFriends     User[]       @relation(name: "friends")
    courses         UserCourse[]

    @@map("users")
}

model UserCourse {
    id       Int    @id @default(autoincrement())
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   Int    @map("user_id")
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId Int    @map("course_id")
}
